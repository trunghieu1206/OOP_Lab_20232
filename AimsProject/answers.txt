# Answers for questions in Lab02:
When should accessor methods be used?
	- accessor methods should not be used in most cases
	- they are dangerous because they provide external access to implementation details
	- if you need to change accessed field's type you would also have to change accessor's return type
	
Answer for part 8: If you create a constructor method to build a DVD by title then create a constructor method to build a DVD  by category. Does Java allow you to do this?
	- Yes, Java allow you to do this because you can have 2 contructors in the same class but the parameters of each parameter must be different (constructor overloading)
	- However if you do this, when you create a new instance of this class you won't be able to create a new Object with both parameters set, it could only be one of two
	-> should include all atttributes in the same contructor

# Answers for questions in Lab03:
What should be the return type of the toString() method in DigitalVideoDisc:
	- this method should be used to store the information of the Object of the DigitalVideoDisc as a String
	- the return type of the toString() method should be String
	
Which classes are aggregates of other classes?
	- Class CompactDisc aggregates class Track
	
If the passing object is not an instance of Media, what happens?
	- when the passing object is an instance of DigitalVideoDisc, CompactDisc or Disc (which all inherits from Media Class), 
JVM will automatically perform upcasting on the Object, a new reference variable will be created that holds the address of the 
true object of one of the three subclasses and since this reference variable has the type of Media it will have a smaller size 
in the heap memory
	- when the passing object is not related to Media class, this will cause error because JVM cannot do type casting on the object 
that has no relationship to Media class.

Polymorphism with toString() method:
	- After create 3 types of medias including a dvd, cd and book and print out the information of the three medias with toString()
method, we get the result : "hust.soict.globalict.aims.media.CompactDisc@1b701da1
							 DVD - The Lion King - Animation - Roger Allers - 87: 19.95
						     hust.soict.globalict.aims.media.Book@75a1cd57"
This is because we only overrode the toString() method of the Class DigitalVideoDisc, the two other Classes we did not override the
toString() method, so they were using the default java Object toString() method.
	- The advantages of Polymorphism are: 
		+ improve readability, maintainability, efficiency of code
		+ useful for code reusability
		+ reduce complexity 
	- Inheritance allows us to inherit attributes and methods from another class, and Polymorphism uses those methods to perform 
different tasks. Inheritance allows subclasses to override methods defined in their superclasses.
	- Differences between Inheritance and Polymorphism:
		+ Inheritance is the mechanism where a new class is derived from an existing class, inheriting its attributes and methods.
Poylymorphism allows objects of different classes to be treated as objects of a common super class
		+ Inheritance is used to achieve reusability of code and establish a child-parent relationship between classes. Polymorphism
is used to achieve flexibility in code by allowing different classes to be treated as instances of the same class, especially when their
methods share the same name.

What class should implement the Comparable interface?
	- the Media class should implement the Comparable interface

In those classes, how should you implement the compareTo() method to reflect the ordering that we want?
	- the compareTo() method should be implemented like this:
	@Override
	public int compareTo(Media media) {
		if(this.getTitle().compareTo(media.getTitle()) != 0) {
			return this.getTitle().compareTo(media.getTitle());
		}
		float compare = this.getCost() - media.getCost();
		if(compare < 0) {
			return -1;
		}
		else if(compare > 0) {
			return 1;
		}
		return 0;
	}

Can we have two ordering rules of the item (by title then cost and by cost then title) if we use this
Comparable interface approach?
	- No, we cannot have 2 ordering rules of the item because we can override the method compareTo() only once in Media Class

Suppose the DVDs have a different ordering rule from the other media types, that is by title, then
decreasing length, then cost. How would you modify your code to allow this?
	- This is not possible

